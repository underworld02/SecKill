#工作进程数量
worker_processes 4;
#Nginx绑定CPU
worker_cpu_affinity   0001 0010 0100 1000;;
#工作进程可打开的最大文件描述符数量，建议65535
worker_rlimit_nofile 65535;
#日志：路径与打印级别
error_log logs/error.log error;
events {
    #指定处理连接的方法，可以不设置，默认会根据平台选最高效的方法，比如Linux是epoll
    #use epoll;
    #一个工作进程的最大连接数：默认512，建议小于等于worker_rlimit_nofile
    worker_connections 65535;
    #工作进程接受请求互斥，默认值off,如果系统流量不高，可以设置为on
    #accept_mutex off;
    #accept_mutex_delay 50ms;
}
http {
        #关闭tcp_nodelay配置
        tcp_nodelay  off;
        #开启零拷贝，优化文件传输效率
        sendfile     on;
        #优化TCP传输
        tcp_nopush   on;
        #与客户端使用短连接
        keepalive_timeout  0;
        #与下游服务使用长连接,指定HTTP协议版本，并清除header中的Connection，默认是close
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        #将客户端IP放在header里传给后端服务，否则获取不到真实IP
        proxy_set_header X-Real-IP $remote_addr;
        #与下游服务的连接建立超时时间
        proxy_connect_timeout 500ms;
        #向下游服务发送数据超时时间
        proxy_send_timeout 500ms;
        #从下游服务拿到响应结果的超时时间，
        #也根据每个接口的响应性能不同，在每个location模块单独设置
        proxy_read_timeout 3000ms;

        #开启响应结果的压缩
        gzip on;
        #压缩的最小长度，小于这个配置的不压缩
        gzip_min_length  1k;
        #执行压缩的缓存区数量以及大小，可以使用默认配置，实际会根据平台自动变化
        #gzip_buffers     4 8k;
        #执行压缩的HTTP请求的最低协议版本，可以不设置，默认是1.1
        #gzip_http_version 1.1;
        #哪些响应类型，会执行压缩
        gzip_types      text/plain;

        #acccess_log的日志格式
        log_format  access  '$remote_addr - $remote_user [$time_local] "$request" $status '
            '"$upstream_addr" "$upstream_status" "$upstream_response_time" userId:"$user_id"';
        #加载其他文件
        lua_package_path "D:/Workspaces/myself/seckill/myself/seckill/seckill/seckill-nginx/lua/?.lua;;";
        include D:/Workspaces/myself/seckill/myself/seckill/seckill/seckill-nginx/config/upstream.conf;
        include D:/Workspaces/myself/seckill/myself/seckill/seckill/seckill-nginx/config/common.conf;
        include D:/Workspaces/myself/seckill/myself/seckill/seckill/seckill-nginx/domain/domain.com;
}